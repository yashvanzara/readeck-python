name: Deploy to PyPI

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare versions

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Set deployment context
        id: context
        run: |
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "pypi_name=Production PyPI" >> $GITHUB_OUTPUT
          echo "pypi_url=https://pypi.org/project/readeck" >> $GITHUB_OUTPUT

      - name: Check version change
        id: version-check
        run: |
          # Get current version from pyproject.toml
          current_version=$(uv run python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          # Try to get version from project.version first, then from hatch.version
          if 'version' in data.get('project', {}):
              print(data['project']['version'])
          else:
              # For dynamic versioning, we need to build and check
              import subprocess
              result = subprocess.run(['uv', 'run', 'python', '-c', 'from importlib.metadata import version; print(version(\"readeck\"))'],
                                    capture_output=True, text=True, cwd='.')
              if result.returncode == 0:
                  print(result.stdout.strip())
              else:
                  # Fallback: extract from setuptools_scm or hatch
                  result = subprocess.run(['uv', 'run', 'python', 'setup.py', '--version'],
                                        capture_output=True, text=True, cwd='.')
                  if result.returncode == 0:
                      print(result.stdout.strip())
                  else:
                      print('0.0.0')  # fallback
          ")

          # Compare with previous commit
          git checkout HEAD~1 -- pyproject.toml
          comparison_version=$(uv run python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          if 'version' in data.get('project', {}):
              print(data['project']['version'])
          else:
              print('0.0.0')  # fallback
          ")
          echo "Comparison version (previous): $comparison_version"

          # Restore current pyproject.toml
          git checkout HEAD -- pyproject.toml

          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "comparison_version=$comparison_version" >> $GITHUB_OUTPUT

          if [ "$current_version" != "$comparison_version" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version has changed from $comparison_version to $current_version"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version has not changed"
          fi

      - name: Install twine
        if: steps.version-check.outputs.version_changed == 'true'
        run: uv tool install twine

      - name: Upload to Production PyPI
        if: steps.version-check.outputs.version_changed == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "Attempting to upload version ${{ steps.version-check.outputs.current_version }} to Production PyPI..."
          uv tool run twine upload dist/* --verbose
          echo "‚úÖ Successfully uploaded version ${{ steps.version-check.outputs.current_version }} to Production PyPI"

      - name: Log success
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          echo "üöÄ Package successfully uploaded to ${{ steps.context.outputs.pypi_name }}"
          echo "Version: ${{ steps.version-check.outputs.current_version }}"
          echo "URL: ${{ steps.context.outputs.pypi_url }}/${{ steps.version-check.outputs.current_version }}/"

      - name: Skip upload
        if: steps.version-check.outputs.version_changed == 'false'
        run: |
          echo "‚è≠Ô∏è  Skipping PyPI upload - version has not changed"
          echo "Current version: ${{ steps.version-check.outputs.current_version }}"
          echo "Target: ${{ steps.context.outputs.pypi_name }}"
